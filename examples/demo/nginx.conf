user nginx;
worker_processes  1;
daemon off;
error_log  /dev/stdout info;
# pid        /var/lib/nginx/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include           /etc/nginx/mime.types;
    default_type      application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log        /var/log/nginx/access.log  main;
    server_tokens     off;
    gzip              on;
    gzip_disable      "msie6";
    gzip_comp_level   6;
    gzip_min_length   1100;
    gzip_buffers      16 8k;
    gzip_proxied      any;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/xml+rss;
    proxy_cache_path  /var/cache/nginx keys_zone=my_cache:10m inactive=60m;
    resolver          8.8.8.8 valid=300s ipv6=off;
    resolver_timeout  10s;

    # download.tensorflow.org
    server {
        listen          80;
        server_name download.tensorflow.org;

        if ( $request_method !~ "GET|HEAD" ) {
            return 405;
        }
        location / {
                proxy_cache my_cache;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass       http://download.tensorflow.org;
                proxy_cache_key         "$host/$proxy_host$uri";
                proxy_cache_valid       200 1d;
        }
    }

    # MNIST
    server {
        listen          80;
        server_name yann.lecun.com;

        if ( $request_method !~ "GET|HEAD" ) {
            return 405;
        }
        location / {
                proxy_cache my_cache;        
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass       http://yann.lecun.com;
                proxy_cache_key         "$host/$proxy_host$uri";
                proxy_cache_valid       200 1d;
        }
    }

    # CIFAR
    server {
        listen          80;
        server_name www.cs.toronto.edu;

        if ( $request_method !~ "GET|HEAD" ) {
            return 405;
        }
        location / {
                proxy_cache my_cache;        
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass       http://www.cs.toronto.edu;
                proxy_cache_key         "$host/$proxy_host$uri";
                proxy_cache_valid       200 1d;
        }
    }

    # google storage
    # TODO: support TLS in the future
    server {
        listen          80;
        server_name storage.googleapis.com;

        if ( $request_method !~ "GET|HEAD" ) {
            return 405;
        }
        location / {
                proxy_cache my_cache;        
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass       https://storage.googleapis.com;
                proxy_cache_key         "$host/$proxy_host$uri";
                proxy_cache_valid       200 1d;
        }
    }

    # coco 
    server {
        listen          80;
        server_name images.cocodataset.org;

        if ( $request_method !~ "GET|HEAD" ) {
            return 405;
        }
        location / {
                proxy_cache my_cache;        
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass       http://images.cocodataset.org;
                proxy_cache_key         "$host/$proxy_host$uri";
                proxy_cache_valid       200 1d;
        }
    }

    # private S3
    #server {
    #    listen          80;
    #    server_name s3.amazonaws.com;

    #    if ( $request_method !~ "GET|HEAD" ) {
    #        return 405;
    #    }
    #    location / {
    #            proxy_cache my_cache;
    #            proxy_cache_key         "$host/$proxy_host$uri";
    #            proxy_cache_valid       200 1d;

    #            set $bucket           '<REPLACE WITH YOUR S3 BUCKET NAME>';
    #            set $aws_access       '<REPLACE WITH YOUR AWS ACCESS KEY>';
    #            set $aws_secret       '<REPLACE WITH YOUR AWS SECRET KEY>';
    #            set $url_full         "$1";
    #            set_by_lua $now       "return ngx.http_time(ngx.time())";
    #            set $string_to_sign   "$request_method\n\n\n\nx-amz-date:${now}\n/$bucket/$url_full";
    #            set_hmac_sha1          $aws_signature $aws_secret $string_to_sign;
    #            set_encode_base64    